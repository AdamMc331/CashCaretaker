// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: "com.github.ben-manes.versions"
apply plugin: "org.jlleitschuh.gradle.ktlint"

buildscript {
    ext.kotlin_version = "1.3.61"
    ext.build_tools_version = '3.6.0-rc01'
    repositories {
        jcenter()
        maven { url "https://maven.google.com" }
        maven { url "https://plugins.gradle.org/m2/" }
        google()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$build_tools_version"
        //noinspection DifferentKotlinGradleVersion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.27.0"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:9.1.1"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://maven.google.com" }
        maven { url "http://dl.bintray.com/androidessence/maven" }
    }

    ext {
        //Android
        appCompatVersion = "1.0.2"
        androidBuildToolsVersion = "28.0.3"
        androidMinSdkVersion = 19
        androidTargetSdkVersion = 28
        androidCompileSdkVersion = 28
        lifecycleVersion = "2.0.0"
        coroutinesVersion = "1.3.3"
        architectureComponentsVersion = "2.1.0"
        materialVersion = "1.1.0-alpha06"
        espressoVersion = "3.2.0"

        //Libraries
        constraintLayoutVersion = "1.1.3"
        materialDesignSpecsVersion = "2.0.1"
        mockitoVersion = "2.16.0"
        timberVersion = "4.7.1"
        rxJavaVersion = "2.2.1"
        rxAndroidVersion = "2.1.1"
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}
