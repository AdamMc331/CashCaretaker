apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jlleitschuh.gradle.ktlint'

androidExtensions {
    experimental = true
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]

    defaultConfig {
        applicationId "com.androidessence.cashcaretaker"
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
        versionCode 12
        versionName "2.1.0"

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    dataBinding {
        enabled = true
    }
    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(project(":database"))

    // Kotlin/Android
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    //noinspection GradleDependency
    implementation "com.google.android.material:material:1.1.0"
    annotationProcessor "androidx.databinding:databinding-compiler:$build_tools_version"
    kapt "androidx.databinding:databinding-compiler:$build_tools_version"

    // Third party
    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "com.androidessence:materialdesignspecs:$materialDesignSpecsVersion"

    // Room components
    implementation "androidx.room:room-runtime:2.2.4"
    implementation "androidx.room:room-ktx:2.2.4"
    androidTestImplementation "androidx.room:room-testing:2.2.4"
    annotationProcessor "androidx.room:room-compiler:2.2.4"
    kapt "androidx.room:room-compiler:2.2.4"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    kapt "androidx.lifecycle:lifecycle-compiler:2.2.0"

    // ViewModel Kotlin support
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // Testing
    testImplementation 'junit:junit:4.13'
    testImplementation "org.mockito:mockito-core:3.3.1"
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation("androidx.test.espresso:espresso-core:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'com.android.support'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
    }
}
repositories {
    mavenCentral()
}

ktlint {
    ktlint.version = "0.36.0"
    android = true
    enableExperimentalRules = true
    reporters {
        reporter "plain"
        reporter "checkstyle"
    }
    additionalEditorconfigFile = file("${project.projectDir}/.editorConfig")
    outputColorName = "RED"
}
